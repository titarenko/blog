<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | Constantin Titarenko's Blog]]></title>
  <link href="http://blog.titarenko.info/categories/web/atom.xml" rel="self"/>
  <link href="http://blog.titarenko.info/"/>
  <updated>2013-07-09T23:35:41+03:00</updated>
  <id>http://blog.titarenko.info/</id>
  <author>
    <name><![CDATA[Constantin Titarenko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ASP.NET File Upload Possible Issue]]></title>
    <link href="http://blog.titarenko.info/2012/05/22/asp-net-file-upload-possible-issue/"/>
    <updated>2012-05-22T00:00:00+03:00</updated>
    <id>http://blog.titarenko.info/2012/05/22/asp-net-file-upload-possible-issue</id>
    <content type="html"><![CDATA[<p>One of issues you can face when developing web application with use of ASP.NET MVC and IIS 7.5 is maximal request size. No doubt, after googling, you&rsquo;ll find that cause is request size limit, so you&rsquo;ll happily add to web.config following line and forget about this.</p>

<p><code>xml
&lt;httpRuntime maxRequestLength="100000"/&gt;
</code></p>

<p>But if under some circumstances you&rsquo;ll find that controller&rsquo;s action responsible for receiving of large file is not being triggered but instead application returns 404 code, try following solution. Please note, in this case content length should be provided in bytes, not kilobytes like in prevous example.</p>

<p>```xml
<security></p>

<pre><code>&lt;requestFiltering&gt;
    &lt;requestLimits maxAllowedContentLength="100000000" /&gt;
&lt;/requestFiltering&gt;
</code></pre>

<p></security>
```</p>

<p>For me, while working with Windows integrated authentication, this helped a lot. Thanks to <a href="http://stackoverflow.com/a/6687932">StackOverflow</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cookie Aware WebClient (.NET)]]></title>
    <link href="http://blog.titarenko.info/2012/02/20/cookie-aware-webclient-net/"/>
    <updated>2012-02-20T00:00:00+02:00</updated>
    <id>http://blog.titarenko.info/2012/02/20/cookie-aware-webclient-net</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve used WebClient to access protected content on some site, then you probably had dealt with <code>403</code> error <code>"Not authorized"</code>. In case if that site has used cookies for persisting of authentication state then most probable reason is that WebClient doesn&rsquo;t support managing cookies by default. However, this is a matter of few lines of code to implement the solution which is given above.</p>

<p>```csharp
/// <summary>
/// Web client with cookies enabled.
/// </summary>
class CookieAwareWebClient : WebClient
{</p>

<pre><code>private readonly CookieContainer container = new CookieContainer();

protected override WebRequest GetWebRequest(Uri address)
{
    var request = base.GetWebRequest(address);
    if (request is HttpWebRequest)
    {
        (request as HttpWebRequest).CookieContainer = container;
    }

    return request;
}

protected override WebResponse GetWebResponse(WebRequest request)
{
    var response = base.GetWebResponse(request);
    if (response is HttpWebResponse)
    {
        container.Add((response as HttpWebResponse).Cookies);
    }

    return response;
}
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
